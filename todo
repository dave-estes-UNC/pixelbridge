TODO
x Create new nDDI APIs to update the scaler for each coefficient matrix.
x Correctly initialize the coefficient planes with 0 scalers (PixelBridgeMain, FlatTiler, and CachedTiler).
x Update GlNddiDisplay rendering to use multiple coefficient planes.
x Update coefficent blending mode to actually use the new and official multiple coefficient support.
x Implement DctTiler.
  x Initialize Frame Volume with pre-rendered basis functions
  x Initialize Coefficient Planes
  x Debug: Make a dummy tile updater that just renders 64 macroblocks as the basis functions themselves.
  x Implement proper updater
  x Figure out the proper sign-extending and clamping strategy for the accumulators in ComputePixel().
  x Implement a FillScalerTiled that will accept an array of scalers and fill each tile in the plane with the provided scaler
x Review and fix ALL transmission cost calculations. Pay attention to the p in the (x, y, p) locations for coefficient planes.
x Get PSNR working again.
x Add cost model tracking for scaler writes...and read?
x For DCT, initializing the coefficient plane is KILLING me. Fix it by:
  x Redesign it to fill the a coefficient matrix to an 8x8x192 area.
  x Then kill in the k values for each of the 192 planes.
x Update the coefficient plane to update the cost model correctly and efficiently with OpenMP. There are descrepencies when between OpenMP and NO_OMP.
x Update cost model for scaler access, either by just registering it ot the coefficient plane or by some more specific component.
x Determine if it's necessary to narrow some data values like scalers and coordinates (for transmission).

x Speed up DCT
  x Modify headless display to do a light-weight simulation.
  x Turn OpenMP back on after fixing the slowdown
  - Modify DCT Tiler to not update tiles that haven't changed significantly enough

- Optimize Coefficient Planes data layout
  x Analyze fb, flat, cache, and dct in terms of data reads and writes in order to characterize each.
  x Run perf to get a baseline of cache misses for fb, flat, cache, and dct.
  ? Should I continue to internally store scalers as Scaler structs with the unused alpha channel?
  x Re-arrange coefficient planes, arranging coefficient matrices by stacks and then scalars as stacks per pixel
    NOTE: This worked well for coefficient matrices but not for the scalers. See top of CoefficientPlanes.h
  - If necessary, update NDimensionalDisplayInterface::FillScalerTileStack to use regular array of Scalars and not a vector
  - Implement CoefficientPlane::fillScalarTileStack and directly call it from the BaseNddiDisplay::fillScalarTileStack
  - Implement CoefficientPlane::setScalarStack which is used in CoefficientPlane::fillScalarTileStack

x Re-run all of the original experiments including the new video-based tilers.
  x Run them all headless
  x Run the lossy modes for PSNR
    NOTE: Waited on RAM

- Revisit the Blending Experiments
  x Get Temporal Blending working
  x Get FrameVolume Blending working again
  - Devise some experiments for blending, perhaps a HUD on top of video.

- Update CL implementation
  x Remove #errors when using OpenCL in the DCT and IT tilers.
  x Update the CL variants of the display elements to support the narrowed data structures.
  x Add the ClCoefficientPlanes support for multiple coefficient planes
  - Test:
    - ClCoefficientPlanes.PutCoefficientMatrix()
    - ClCoefficientPlanes.FillCoefficientMatrix()
    - ClCoefficientPlanes.FillCoefficient()
  - Add the ClCoefficientPlanes support for scalers
    - Implement FillScaler API for ClNddiDisplay.
    - Implement FillScalerTiles API for ClNddiDisplay.
    - Implement FillScalerTileStack API for ClNddiDisplay.


Future Work
- Consider breaking down the COEFFICIENT_PLANE_COMPONENT into coefficient accesses and scaler accesses.
- Add nDDI command caching and playback mode. Will avoid the video decode and tiler calculations.
- Modify FFMPEG's MJPEG decoder to and have it create DCT coefficients for the DctTiler automatically.